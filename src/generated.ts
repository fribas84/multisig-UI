// Generated by @wagmi/cli@1.3.0 on 7/29/2023 at 8:09:47 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MultiSigWallet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const multiSigWalletABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: '_quorumRequired', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'transactionIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'TxAlreadyApproved',
  },
  {
    type: 'error',
    inputs: [
      { name: 'transactionIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'TxAlreadySent',
  },
  {
    type: 'error',
    inputs: [
      { name: 'transactionIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'TxNotExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'trasactionIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ApprovedWithdrawTx',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transactionIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CreatedWithdrawTx',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'balance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_transactionIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approveWithdrawTx',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createdWithdrawTx',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getWithdrawRequest',
    outputs: [
      {
        name: '',
        internalType: 'struct MultiSigWallet.WidthdrawTxStruct[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'approvals', internalType: 'uint256', type: 'uint256' },
          { name: 'sent', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'owners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumRequired',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

/**
 *
 */
export const multiSigWalletAddress = {
  31337: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
} as const

/**
 *
 */
export const multiSigWalletConfig = {
  address: multiSigWalletAddress,
  abi: multiSigWalletABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__.
 *
 *
 */
export function useMultiSigWalletRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof multiSigWalletABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"getBalance"`.
 *
 *
 */
export function useMultiSigWalletGetBalance<
  TFunctionName extends 'getBalance',
  TSelectData = ReadContractResult<typeof multiSigWalletABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'getBalance',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"getOwners"`.
 *
 *
 */
export function useMultiSigWalletGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof multiSigWalletABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"getWithdrawRequest"`.
 *
 *
 */
export function useMultiSigWalletGetWithdrawRequest<
  TFunctionName extends 'getWithdrawRequest',
  TSelectData = ReadContractResult<typeof multiSigWalletABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'getWithdrawRequest',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"isOwner"`.
 *
 *
 */
export function useMultiSigWalletIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof multiSigWalletABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"owners"`.
 *
 *
 */
export function useMultiSigWalletOwners<
  TFunctionName extends 'owners',
  TSelectData = ReadContractResult<typeof multiSigWalletABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'owners',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"quorumRequired"`.
 *
 *
 */
export function useMultiSigWalletQuorumRequired<
  TFunctionName extends 'quorumRequired',
  TSelectData = ReadContractResult<typeof multiSigWalletABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'quorumRequired',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__.
 *
 *
 */
export function useMultiSigWalletWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof multiSigWalletAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof multiSigWalletABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof multiSigWalletABI, TFunctionName, TMode>({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"approveWithdrawTx"`.
 *
 *
 */
export function useMultiSigWalletApproveWithdrawTx<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof multiSigWalletAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'approveWithdrawTx'
        >['request']['abi'],
        'approveWithdrawTx',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'approveWithdrawTx'
      }
    : UseContractWriteConfig<
        typeof multiSigWalletABI,
        'approveWithdrawTx',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approveWithdrawTx'
      } = {} as any,
) {
  return useContractWrite<typeof multiSigWalletABI, 'approveWithdrawTx', TMode>(
    {
      abi: multiSigWalletABI,
      address: multiSigWalletAddress[31337],
      functionName: 'approveWithdrawTx',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"createdWithdrawTx"`.
 *
 *
 */
export function useMultiSigWalletCreatedWithdrawTx<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof multiSigWalletAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'createdWithdrawTx'
        >['request']['abi'],
        'createdWithdrawTx',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'createdWithdrawTx'
      }
    : UseContractWriteConfig<
        typeof multiSigWalletABI,
        'createdWithdrawTx',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createdWithdrawTx'
      } = {} as any,
) {
  return useContractWrite<typeof multiSigWalletABI, 'createdWithdrawTx', TMode>(
    {
      abi: multiSigWalletABI,
      address: multiSigWalletAddress[31337],
      functionName: 'createdWithdrawTx',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"deposit"`.
 *
 *
 */
export function useMultiSigWalletDeposit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof multiSigWalletAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'deposit' }
    : UseContractWriteConfig<typeof multiSigWalletABI, 'deposit', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof multiSigWalletABI, 'deposit', TMode>({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__.
 *
 *
 */
export function usePrepareMultiSigWalletWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigWalletABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigWalletABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"approveWithdrawTx"`.
 *
 *
 */
export function usePrepareMultiSigWalletApproveWithdrawTx(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'approveWithdrawTx'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'approveWithdrawTx',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'approveWithdrawTx'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"createdWithdrawTx"`.
 *
 *
 */
export function usePrepareMultiSigWalletCreatedWithdrawTx(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'createdWithdrawTx'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'createdWithdrawTx',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'createdWithdrawTx'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"deposit"`.
 *
 *
 */
export function usePrepareMultiSigWalletDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigWalletABI, 'deposit'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigWalletABI, 'deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__.
 *
 *
 */
export function useMultiSigWalletEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"ApprovedWithdrawTx"`.
 *
 *
 */
export function useMultiSigWalletApprovedWithdrawTxEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'ApprovedWithdrawTx'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    eventName: 'ApprovedWithdrawTx',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'ApprovedWithdrawTx'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"CreatedWithdrawTx"`.
 *
 *
 */
export function useMultiSigWalletCreatedWithdrawTxEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'CreatedWithdrawTx'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    eventName: 'CreatedWithdrawTx',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'CreatedWithdrawTx'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"Deposit"`.
 *
 *
 */
export function useMultiSigWalletDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'Deposit'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof multiSigWalletAddress } = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    address: multiSigWalletAddress[31337],
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'Deposit'>)
}
